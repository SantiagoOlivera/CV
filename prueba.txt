function generatePDF(
        person,
        work_experience,
        studies,
        idioms,
        knowledges,
        my_better_skills
){
    
    var pdf = new jsPDF();
    //show fonts loaded
    //console.log(pdf.getFontList());
    //set Font
    pdf.setFont('RobotoCondensed-Regular');
    
    
    //`${}`
    var _paperWidth = 220;
    var _paperHeight = 297;
    /* var _squareWidth = 80; */
    /*  var _squareHeight = 90; */
    var _marginLeft = 0;
    var _marginTop = 0;
    
    //Personal Data
    drawPersonalDataSection(
        pdf,
        person,
        getBase64Image(document.querySelector("#personalDataImage"))
    );
    //Work Experience
    drawWorkExperiencesSection(
        pdf,
        work_experience
    );
    //Studies
    drawWorkStudiesSection(
        pdf,
        studies
    );
    
    //-------------------------------------------Fin Work Experience-------------------------------------------
    //pdf.addPage();
    //pdf.text(20,20,'TEST PAGE 2!');

    pdf.save("Santiago Ariel Olivera CV.pdf");


}


function getWordTranslatedToPDF(idTranslate){
    //this function brings the word indexed translated 
    //according to the idiom selected in the page
    
        switch(document.querySelector('#idiomSelected').getAttribute('idiom')){
            case 'spanish':
                return translations[idTranslate].ESP;
                break;
            case 'english':
                return translations[idTranslate].ENG;
                break;
            case 'german':
                return translations[idTranslate].GER;
                break;
            default:
                return translations[idTranslate].ESP;

        
    }
}

function getBase64Image(img) {

    var canvas = document.createElement("canvas");
    canvas.width = img.naturalWidth;
    canvas.height = img.naturalHeight;
    var ctx = canvas.getContext("2d");


    console.log(ctx);

    ctx = grayScaleImage(ctx);
    ctx = roundedBordersImage(ctx, img);
    
    var dataURL = canvas.toDataURL("image/png");
    return dataURL.replace(/^data:image\/(png|jpg);base64,/, ""); 

}

function drawPersonalDataSection(
    pdf,
    person,
    photo,
){
    //draw header with personal information in the cv
    //set rect color
    pdf.setFillColor(255, 204, 0);
    //pdf.setFillColor(224,224,224);


    pdf.rect(
        0,   //positionX
        0,   //positionY
        210, //rectWidth
        65,  //rectHeight
        'F'  //F: for Fill, FD: Fill and Border
    ); 

    //add Image
    pdf.addImage(
        photo,  //base64 file
        'JPEG', //tipo de imagen
        10,     //distance of left
        10,     //distance of top
        45,     //width
        45      //height
    );
    
    pdf.setFontSize(35);
    pdf.text(65,20, `${person.name} ${person.secondName} ${person.lastname} `);    
    pdf.setFontSize(15);
    //Birthdate
    pdf.text(65,30, `${getWordTranslatedToPDF(1)}: ${person.birthdate.getDate()} ${ getWordTranslatedToPDF(new GenericFunction().getMonthName(person.birthdate.getMonth()+1).idTranslate)} ${person.birthdate.getFullYear()}`);
    //Age
    pdf.text(65,37, `${getWordTranslatedToPDF(2)}: ${person.getAge()}${getWordTranslatedToPDF(3)}`);
    //Email
    pdf.text(65,44, `Email: ${person.email}`);
    //Nationality
    pdf.text(65,51, `${getWordTranslatedToPDF(4)}: ${ getWordTranslatedToPDF(person.nationality[1])}`);


}



function grayScaleImage(ctx){
    ctx.filter = "grayscale(90%)";

    return ctx;

}

function roundedBordersImage(ctx,img){
    
    ctx.drawImage(img, 0, 0);
    ctx.save();
    ctx.globalCompositeOperation="destination-out";
    ctx.beginPath();
    ctx.moveTo(0,0);
    ctx.lineTo(10,0);
    ctx.arcTo(0,0,0,100,100);
    ctx.closePath();
    ctx.fill();
    ctx.beginPath();
    ctx.moveTo(200,0);
    ctx.lineTo(190,0);
    ctx.arcTo(200,0,200,100,100);
    ctx.closePath();
    ctx.fill();
    ctx.beginPath();
    ctx.moveTo(0,200);
    ctx.lineTo(0,190);
    ctx.arcTo(0,200,100,200,100);
    ctx.closePath();
    ctx.fill();
    ctx.beginPath();
    ctx.moveTo(200,200);
    ctx.lineTo(190,200);
    ctx.arcTo(200,200,200,100,100);
    ctx.closePath();
    ctx.fill();
    ctx.restore();


    return ctx;
}


function drawWorkExperiencesSection(
    pdf,
    work_experience
){
    //Title
    pdf.setFontSize(20);
    pdf.text(20,75, `${getWordTranslatedToPDF(10)}`);

    //
    work_experience.forEach(
        element => {
            
            //draw Rect
            pdf.setLineWidth(2);
            pdf.setDrawColor(255, 204, 0);

            //pdf.setFillColor(255, 204, 0);
            pdf.rect(
                _squareMarginLeft, //positionX
                _squareMarginTop, //positionY
                _squareWidth,    //rectWidth
                _squareHeight,  //rectHeight
            ); 

            
            
            //draw work experience items
            drawWorkExperienceItem(
                pdf,
                element,
                _squareMarginLeft,
                _squareMarginTop,
                _squareWidth
            );
            
            

        }
    );

    studies.forEach(
        element =>{

        }
    );

}


function drawWorkExperienceItem(
    pdf,
    element,
    _squareMarginLeft,
    _squareMarginTop,
    _squareWidth
){
    pdf.setFontSize(20);
    //year
    pdf.text(
        _squareMarginLeft + 3,
        _squareMarginTop + 7,
        `${element.year}`
    );
    //change fontsize
    pdf.setFontSize(15);
    //title
    pdf.text(
        _squareMarginLeft + 3,
        _squareMarginTop + 15,
        `${element.title[0]}`
    );
    pdf.setFontSize(10);
    //Start
    pdf.text(
        _squareMarginLeft + 3,
        _squareMarginTop + 20,
        `${getWordTranslatedToPDF(18)}: ${getWordTranslatedToPDF(new GenericFunction().getMonthName((element.startDate.getMonth()+1)).idTranslate)} ${element.startDate.getFullYear()}`
    );
    //End
    pdf.text(
        _squareMarginLeft + 3,
        _squareMarginTop + 25,
        `${getWordTranslatedToPDF(19)}: ${getWordTranslatedToPDF(new GenericFunction().getMonthName((element.endDate.getMonth()+1)).idTranslate)} ${element.endDate.getFullYear()}`
    );
    //time
    pdf.text(
        _squareMarginLeft + 3,
        _squareMarginTop + 30,
        `${getWordTranslatedToPDF(17)}: ${element.time.years===0 ? '' : element.time.years} ${element.time.years===0 ? '' : element.time.years===1 ? getWordTranslatedToPDF(15) : getWordTranslatedToPDF(16)} ${element.time.months===0 ? '' : element.time.months} ${element.time.months===0 ? '' : element.time.months===1 ? getWordTranslatedToPDF(20) : getWordTranslatedToPDF(21)} ${element.time.days===0 ? '' : element.time.days} ${element.time.days===0 ? '' : element.time.days===1 ? getWordTranslatedToPDF(22) : getWordTranslatedToPDF(23)}`
    );
    //tasks
    pdf.setFontSize(13);
    pdf.text(
        _squareMarginLeft + 3,
        _squareMarginTop + 37,
        `${getWordTranslatedToPDF(30)}`
    );
    //description
    pdf.setFontSize(10);
    pdf.text(
        _squareMarginLeft + 3,
        _squareMarginTop + 42,
        pdf.splitTextToSize(element.description[0], _squareWidth-3)
    );
    //Programming Tools Used
    //console.log( pdf.getTextDimensions(pdf.splitTextToSize(element.description[0], 180)) );
    //console.log(SPACE8);
    pdf.setFontSize(13);
    var _descriptionHeight = pdf.getTextDimensions(pdf.splitTextToSize(element.description[0], 180)).h;
    pdf.text(
        _squareMarginLeft + 3,
        _squareMarginTop + 48 + _descriptionHeight,
        `${getWordTranslatedToPDF(24) }`
    );

    pdf.setFontSize(10);
    var cont = 5;
    element.programingTools.forEach(
        element => {
            pdf.text(
                _squareMarginLeft + 3,
                _squareMarginTop + 48 + _descriptionHeight + cont, 
                `- ${element.title}`  
            );
            cont+=5;
        }
    );

}


function setPositionItem(
    _squareMarginLeft,
    _squareMarginTop,
    _paperWidth,
    _paperHeight

){
    if(_squareMarginLeft + _squareWidth*2 > _paperWidth){
        
        _squareMarginLeft = 20;
        _squareMarginTop  += _squareHeight + 10;



        if((_squareMarginTop + _squareHeight) > _paperHeight){
            pdf.addPage();
            _squareMarginTop = 20;
            _squareMarginLeft = 20;
        }

    }else{
        _squareMarginLeft += _squareWidth + 10;                
    }
}